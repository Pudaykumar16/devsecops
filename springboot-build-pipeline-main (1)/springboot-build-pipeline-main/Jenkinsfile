pipeline {
  agent  any

  environment { 
    registry = "dark5980/democicd" 
    registryCredential = 'dockercri' 
  }

  stages {
    stage('Build') {
      steps {
        echo "Building Jar Component ..."
        dir('/tmp/jenkins/workspace/devopes') {
          sh "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64; mvn clean package"
        }
      }
    }

    stage('Code Coverage') {
      steps {
        echo "Running Code Coverage ..."
        dir('/tmp/jenkins/workspace/devopes') {
          sh "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64; mvn jacoco:report"
        }
      }
    }

    stage('SAST') {
      steps { 
        echo "Running Static Application Security Testing using SonarQube Scanner ..."
        dir('/tmp/jenkins/workspace/devopes') {
          withSonarQubeEnv('sonar') {
            sh 'mvn sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml -Dsonar.projectName=wezvatech'
          }
        }
      }
    }

    stage('Quality Gates') {
      steps { 
        echo "Running Quality Gates to verify the code quality"
        dir('/tmp/jenkins/workspace/devopes') {
          script {
            timeout(time: 1, unit: 'MINUTES') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
            }
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps { 
        echo "Build Docker Image"
        dir('/tmp/jenkins/workspace/devopes') {
          script {
            docker.withRegistry('', registryCredential) { 
              def myImage = docker.build(registry)
              myImage.push()
            }
          }
        }
      }
    }
        
    stage('Scan Docker Image') {
      steps { 
        echo "Scanning Image for Vulnerabilities"
        dir('/tmp/jenkins/workspace/devopes') {
          sh "trivy image --scanners vuln --offline-scan ${registry}:latest > trivyresults.txt"
        }
      }
    }

    stage('Smoke Test') {
      steps { 
        echo "Smoke Test the Image"
        dir('/tmp/jenkins/workspace/devopes') {
          sh "docker run -d --name smokerun -p 8080:8080 ${registry}:latest"
          sh "sleep 90; ./check.sh"
          sh "docker rm --force smokerun"
        }
      }
    }
  }
}

